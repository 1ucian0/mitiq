---
jupytext:
  text_representation:
    extension: .myst
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.11.4
kernelspec:
  display_name: Python 3
  language: python
  name: python3
---


# Mitiq Core Concepts

## Frontends

Mitiq can accept quantum circuit representations in a variety of formats from different tools or platforms.
These input formats are referred to here as _frontends_.
The frameworks currently supported are:

```{code-cell} ipython3
import mitiq 

mitiq.SUPPORTED_PROGRAM_TYPES.keys()
```

with Cirq being used for the internal implementations of the mitigation methods.
There is also frontend support for any circuit description that complies with the OpenQASM 2.0 standard. The Mitiq-defined type `QPROGRAM` uses any of the program types from the supported platforms that are installed on the system.
For example, if you haven't installed PyQuil, then even though Mitiq supports it, you will not be able to use PyQuil programs in Mitiq until it is installed.

With any of these frontends (with the exception of Cirq), the circuit representation will be converted internally to a Cirq circuit object with the relevant conversion methods in `mitiq.interface` for each frontend.
For example, you can use {func}`mitiq.interface.mitiq_braket.conversions.from_braket()` to convert a Braket circuit to a Cirq circuit.

Examples for using each of the frameworks to represent the input to a mitigation method are linked below.

- [Cirq](../examples/ibmq-backends.myst)
- [Qiskit](../examples/ibmq-backends.myst)
- [PyQuil](../examples/pyquil_demo.myst)
- [Braket](../examples/braket_mirror_circuit.myst)

## Backends

A _backend_ is any simulator or hardware device that can be used to execute quantum circuits that are valid mitiq.QPROGRAM objects.
These backends are usually installed separately as needed by the user.
Backends are used by Mitiq in the `mitiq.Executor` class to run the mitigated `mitiq.QPROGRAM` objects.
For more information on executors, see the [Executors](guide-executor.myst) section of this guide.

## Executing circuits

Executing programs: Functions with the signature mitiq.QPROGRAM -> mitiq.QuantumResult

## Batch execution of circuits

Batch executing programs: Functions with the signature T[mitiq.QPROGRAM] -> T[mitiq.QuantumResult] where T is one of the types here.
